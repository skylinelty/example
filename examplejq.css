.testdiv {
	height: 150px;
	width: 150px;
	border: 1px blue solid;
}
body {
	height: 2000px;
	width: 2000px;
}
body>a, body>a:hover {
	background: yellow;
	position: absolute;
	text-decoration: none;
	display: block;
	width: 50px;
	top: 1750px;
	left: 90%;
}
#title.fixed {
	position: fixed;
	top: 0;
	background: yellow;
	z-index: 100
}

/*// 注意此处的fixed类的css文件中类前必须加#title以提升其权值，否则会因为类选择器权值小于id选择器而不可用
// 权重记忆口诀。从0开始，一个行内样式+1000，一个id+100，一个属性选择器/class或者伪类+10，一个元素名，或者伪元素+1*/
#title {
	position: relative;
	text-align: center;	/*text-align该属性可以被继承*/
	background: #C3FF75;
	width: 1000px;
	height: 50px;
	border-radius: 10px;
	box-shadow: 0px 10px 40px #DC3D74;
	top: 11px;
	left: 50%;
	margin-left: -500px;
	overflow: hidden;
	list-style-type: none;
	padding-left: 0px;
	z-index: 100;/*	font-size:0;*/

	/*	从上面的代码我们很难发现产生“空白间隙”的问题。其实这个问题是我们写代码的习惯所造成的。平时我们写代码，
	为了使代码看上去“层级分明”，通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常
	情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。
	既然我们已经知道产生问题的原因了，那么就很好解决该问题。空白符也是字符，只要是字符就会联想到字体，字体大小之类的。
	所以去除空白符的存在只需要设置字体大小为零就行了（font-size:0;）
	*/
}
#title li {
	display: inline-block;
	position: relative;
	width: 120px;
	height: 100%;
	text-shadow: 1px 2px 4px rgba(0, 0, 0, .5);
	list-style: none outside none;
}
#title li a {
	display: block;
	font-size: 25px;
	text-decoration: none;
	height: 40px;
	width: 100%;
	padding-top: 10px;
	border: 1px solid #fff;
	transition: all 2s;
	-webkit-transition: all 2s;
}
#title li:nth-child(2n) a:hover {
	transform: rotate(15deg);
	-webkit-transform: rotate(15deg);
}
#title li:nth-child(2n+1) a:hover {
	transform: rotateX(90deg);
	-webkit-transform: rotateX(90deg);
}
#title li:after {
	content: "";
	position: absolute;
	top: 14px;
	height: 25px;
	width: 2px;
	right: 0;
	background: -webkit-linear-gradient(top, green, blue 50%, rgba(255, 255, 255, 0.5));	/*渐变*/
}
#title li:nth-last-child(1)::after {
	background: none;
}
#title a, #title a:hover {
	color: #fff;
	text-decoration: none
}
#article {
	height: 100px;
	width: 90%;
	margin: 0 auto;
	background: yellow
}
#m2 {
	white-space: nowrap;	/*内联元素强制不换行,该属性可以被继承*/

	/*	强制不换行 
	p { white-space:nowrap; }
	自动换行
	p { word-wrap:break-word; word-break:normal; }
	强制英文单词断行
	p { word-break:break-all; } 
	*/
}
#main {
	height: 200px;
	width: 604px;
	margin-top: 10px;
	left: 5%;
	position: relative;
	display: inline-block;
	white-space: normal;
}
.pane {
	float: left;
	height: 100%;
	width: 300px;
	border: 1px solid #34FF00
}
.mindiv {
	height: 95%;
	width: 95%;
	margin-left: 5%
}
#condiv1 {
	overflow: hidden;
	background: #13F5EE
}
#condiv1:after {
	content: "";
	position: absolute;
	top: 85px;
	height: 30px;
	width: 3px;
	right: 2px;
	background: red
}
#togglediv {
	display: inline-block;
	left: 5%;
	top: -60px;
	position: relative;
	white-space: normal;
	word-wrap: break-word;/*	word-wrap:break-word与word-break:break-all共同点是都能把长单词强行断句，
		不同点是word-wrap:break-word会首先起一个新行来放置长单词，
		新的行还是放不下这个长单词则会对长单词进行强制断句；
		而word-break:break-all则不会把长单词放在一个新行里，
		当这一行放不下的时候就直接强制断句了。*/
}
body>ul li {
	
	list-style: none outside none;
	display: inline-block;
}
body>ul li a {
	text-decoration: none;
	display: block;
}
span{
	display: block;
	height: 100px;
	width: 100px;
	position: relative;
}
#simg img
{
	width: 100%;
	height: 100%;
}
#simg img.hide{
	display: none;
	left: 0;
	top:0;
	position: absolute;
}